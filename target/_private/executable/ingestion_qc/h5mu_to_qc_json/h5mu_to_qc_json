#!/usr/bin/env bash

# h5mu_to_qc_json build_main
# 
# This wrapper script is auto-generated by viash 0.9.4 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Jakub Majercik (author)
#  * Dorien Roosen (author)
#  * Robrecht Cannoodt (author)
#  * Weiwei Schultz (contributor)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  local source="$1"
  while [ -h "$source" ]; do
    local dir="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source"
  done
  cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  local source="$1"
  while [[ "$source" != "" && ! -e "$source/.build.yaml" ]]; do
    source=${source%/*}
  done
  echo $source
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_NAME="h5mu_to_qc_json"
VIASH_META_FUNCTIONALITY_NAME="h5mu_to_qc_json"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"



# initialise variables
VIASH_MODE='run'
VIASH_ENGINE_ID='docker'

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  local save=$-; set +e
  local docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    local save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    local out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  local save=$-; set +e
  local out
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$1' push succeeded."
  else
    ViashError "Container '$1' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  local save=$-; set +e
  ViashDockerPull $1
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1          : image identifier with format `[registry/]image[:tag]`
# $2          : docker setup strategy, see DockerSetupStrategy.scala
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  local image_id="$1"
  local setup_strategy="$2"
  if [ "$setup_strategy" == "alwaysbuild" -o "$setup_strategy" == "build" -o "$setup_strategy" == "b" ]; then
    ViashDockerBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayspull" -o "$setup_strategy" == "pull" -o "$setup_strategy" == "p" ]; then
    ViashDockerPull $image_id
  elif [ "$setup_strategy" == "alwayspullelsebuild" -o "$setup_strategy" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayspullelsecachedbuild" -o "$setup_strategy" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $image_id $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayscachedbuild" -o "$setup_strategy" == "cachedbuild" -o "$setup_strategy" == "cb" ]; then
    ViashDockerBuild $image_id $(ViashDockerBuildArgs "$engine_id")
  elif [[ "$setup_strategy" =~ ^ifneedbe ]]; then
    local save=$-; set +e
    ViashDockerLocalTagCheck $image_id
    local outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $image_id already exists"
    elif [ "$setup_strategy" == "ifneedbebuild" ]; then
      ViashDockerBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $image_id $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbepull" ]; then
      ViashDockerPull $image_id
    elif [ "$setup_strategy" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $image_id $(ViashDockerBuildArgs "$engine_id")
    else
      ViashError "Unrecognised Docker strategy: $setup_strategy"
      exit 1
    fi
  elif [ "$setup_strategy" == "push" -o "$setup_strategy" == "forcepush" -o "$setup_strategy" == "alwayspush" ]; then
    ViashDockerPush "$image_id"
  elif [ "$setup_strategy" == "pushifnotpresent" -o "$setup_strategy" == "gentlepush" -o "$setup_strategy" == "maybepush" ]; then
    local save=$-; set +e
    ViashDockerRemoteTagCheck $image_id
    local outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$image_id' exists, doing nothing."
    else
      ViashNotice "Container '$image_id' does not yet exist."
      ViashDockerPush "$image_id"
    fi
  elif [ "$setup_strategy" == "donothing" -o "$setup_strategy" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $setup_strategy"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  local image_id="$1"
  shift 1
  local commands="$@"
  local save=$-; set +e
  local missing # mark 'missing' as local in advance, otherwise the exit code of the command will be missing and always be '0'
  missing=$(docker run --rm --entrypoint=sh "$image_id" -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  local outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$image_id' does not contain command '$missing'."
  	exit 1
  fi
}

# ViashDockerBuild: build a docker image
# $1                               : image identifier with format `[registry/]image[:tag]`
# $...                             : additional arguments to pass to docker build
# $VIASH_META_TEMP_DIR             : temporary directory to store dockerfile & optional resources in
# $VIASH_META_NAME                 : name of the component
# $VIASH_META_RESOURCES_DIR        : directory containing the resources
# $VIASH_VERBOSITY                 : verbosity level
# exit code $?                     : whether or not the image was built successfully
function ViashDockerBuild {
  local image_id="$1"
  shift 1

  # create temporary directory to store dockerfile & optional resources in
  local tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-$VIASH_META_NAME-XXXXXX")
  local dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile "$VIASH_ENGINE_ID" > "$dockerfile"

  # generate the build command
  local docker_build_cmd="docker build -t '$image_id' $@ '$VIASH_META_RESOURCES_DIR' -f '$dockerfile'"

  # build the container
  ViashNotice "Building container '$image_id' with Dockerfile"
  ViashInfo "$docker_build_cmd"
  local save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    eval $docker_build_cmd
  else
    eval $docker_build_cmd &> "$tmpdir/docker_build.log"
  fi

  # check exit code
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$image_id'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
}

######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# $1    : engine identifier
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  local engine_id="$1"

  if [[ "$engine_id" == "docker" ]]; then
    cat << 'VIASHDOCKER'
FROM python:3.12-slim
ENTRYPOINT []
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y procps && \
  rm -rf /var/lib/apt/lists/*

RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "anndata~=0.11.1" "mudata~=0.3.1" && \
  python -c 'exec("try:\n  import awkward\nexcept ModuleNotFoundError:\n  exit(0)\nelse:  exit(1)")'

LABEL org.opencontainers.image.authors="Jakub Majercik, Dorien Roosen, Robrecht Cannoodt, Weiwei Schultz"
LABEL org.opencontainers.image.description="Companion container for running component ingestion_qc h5mu_to_qc_json"
LABEL org.opencontainers.image.created="2025-08-12T14:26:57Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline_qc"
LABEL org.opencontainers.image.revision="4b5539227ceaa6be5c7e97ca45fcf3aa025466fd"
LABEL org.opencontainers.image.version="build_main"

VIASHDOCKER
  fi
}

# ViashDockerBuildArgs: return the arguments to pass to docker build
# $1    : engine identifier
# return : arguments to pass to docker build
function ViashDockerBuildArgs {
  local engine_id="$1"

  if [[ "$engine_id" == "docker" ]]; then
    echo ""
  fi
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  local parr
  local outp
  local len
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashDockerAutodetectMount: auto configuring docker mounts from parameters
# $1                             : The parameter value
# returns                        : New parameter
# $VIASH_DIRECTORY_MOUNTS        : Added another parameter to be passed to docker
# $VIASH_DOCKER_AUTOMOUNT_PREFIX : The prefix to be used for the automounts
# examples:
#   ViashDockerAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashDockerAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashDockerAutodetectMount {
  local abs_path=$(ViashAbsolutePath "$1")
  local mount_source
  local base_name
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  local mount_target="$VIASH_DOCKER_AUTOMOUNT_PREFIX$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashDockerAutodetectMountArg {
  local abs_path=$(ViashAbsolutePath "$1")
  local mount_source
  local base_name
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  local mount_target="$VIASH_DOCKER_AUTOMOUNT_PREFIX$mount_source"
  ViashDebug "ViashDockerAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashDockerStripAutomount {
  local abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#$VIASH_DOCKER_AUTOMOUNT_PREFIX}"
}
# initialise variables
VIASH_DIRECTORY_MOUNTS=()

# configure default docker automount prefix if it is unset
if [ -z "${VIASH_DOCKER_AUTOMOUNT_PREFIX+x}" ]; then
  VIASH_DOCKER_AUTOMOUNT_PREFIX="/viash_automount"
fi

# initialise docker variables
VIASH_DOCKER_RUN_ARGS=(-i --rm)


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "h5mu_to_qc_json build_main"
  echo ""
  echo "Takes H5MU files that have been ingested by CellRanger, Xenium or CosMx and"
  echo "processed by the QC workflow, and generates:"
  echo "- A JSON file that contains the combined data for the QC report"
  echo "- A JSON file that defines the layout and structure of the QC report"
  echo ""
  echo "Inputs:"
  echo "    --input"
  echo "        type: file, required parameter, multiple values allowed, file must exist"
  echo "        example: path/to/file.h5mu"
  echo "        The input h5mu file(s)"
  echo ""
  echo "    --modality"
  echo "        type: string"
  echo "        default: rna"
  echo "        The modality to use"
  echo ""
  echo "    --ingestion_method"
  echo "        type: string, required parameter"
  echo "        choices: [ cellranger_multi, xenium ]"
  echo "        Method that was used to ingest the data - this will define the structure"
  echo "        of the report that is generated."
  echo ""
  echo "    --obs_sample_id"
  echo "        type: string"
  echo "        default: sample_id"
  echo "        The key in the h5mu file that contains the sample ID. If not provided,"
  echo "        each H5MU file will be considered as a separate sample."
  echo ""
  echo "    --obs_total_counts"
  echo "        type: string"
  echo "        default: total_counts"
  echo "        The key in the h5mu .obs field that contains the total counts."
  echo ""
  echo "    --obs_num_nonzero_vars"
  echo "        type: string"
  echo "        default: num_nonzero_vars"
  echo "        The key in the h5mu .obs field that contains the number of nonzero vars."
  echo ""
  echo "    --obs_fraction_mitochondrial"
  echo "        type: string"
  echo "        default: fraction_mitochondrial"
  echo "        The key in the h5mu .obs field that contains the fraction mitochondrial"
  echo "        genes."
  echo ""
  echo "    --obs_fraction_ribosomal"
  echo "        type: string"
  echo "        default: fraction_ribosomal"
  echo "        The key in the h5mu .obs field that contains the fraction ribosomal"
  echo "        genes."
  echo ""
  echo "Outputs:"
  echo "    --output"
  echo "        type: file, required parameter, output, file must exist"
  echo "        example: path/to/file.json"
  echo "        The output JSON file"
  echo ""
  echo "    --output_reporting_json"
  echo "        type: file, required parameter, output, file must exist"
  echo "        example: path/to/file.json"
  echo "        The output JSON file that defines the QC report"
  echo ""
  echo "Filtering & grouping options:"
  echo "    --min_total_counts"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Minimum total counts for a cell to be included in the output"
  echo ""
  echo "    --min_num_nonzero_vars"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Minimum number of nonzero vars for a cell to be included in the output"
  echo ""
  echo "    --obs_metadata"
  echo "        type: string, multiple values allowed"
  echo "        example: donor_id;cell_type;batch;condition"
  echo "        The metadata keys in the h5mu .obs to include in the output JSON."
  echo ""
  echo "Options for CellRanger reports:"
  echo "    --obs_cellbender"
  echo "        type: string, multiple values allowed"
  echo "        default:"
  echo "cellbender_background_fraction;cellbender_cell_probability;cellbender_cell_size;cellbender_droplet_efficiency"
  echo "        The cellbender keys in the h5mu .obs to include in the output JSON"
  echo ""
  echo "    --uns_cellranger_metrics"
  echo "        type: string"
  echo "        default: metrics_cellranger"
  echo "        The key in the h5mu file .uns that contains the cellranger metrics"
  echo ""
  echo "Options for Xenium reports:"
  echo "    --obs_nucleus_area"
  echo "        type: string"
  echo "        default: nucleus_area"
  echo "        The key in the h5mu .obs field that contains the nucleus area."
  echo ""
  echo "    --obs_cell_area"
  echo "        type: string"
  echo "        default: cell_area"
  echo "        The key in the h5mu .obs field that contains the cell area."
  echo ""
  echo "    --obs_x_coord"
  echo "        type: string"
  echo "        default: x_coord"
  echo "        The key in the h5mu .obs field that contains the x coordinate."
  echo ""
  echo "    --obs_y_coord"
  echo "        type: string"
  echo "        default: y_coord"
  echo "        The key in the h5mu .obs field that contains the y coordinate."
  echo ""
  echo "    --obs_control_probe_counts"
  echo "        type: string"
  echo "        default: control_probe_counts"
  echo "        The key in the h5mu .obs field that contains the number of control"
  echo "        probes."
  echo ""
  echo "    --obs_control_codeword_counts"
  echo "        type: string"
  echo "        default: control_codeword_counts"
  echo "        The key in the h5mu .obs field that contains the number of control"
  echo "        codewords."
  echo ""
  echo "Viash built in Computational Requirements:"
  echo "    ---cpus=INT"
  echo "        Number of CPUs to use"
  echo "    ---memory=STRING"
  echo "        Amount of memory to use. Examples: 4GB, 3MiB."
  echo ""
  echo "Viash built in Docker:"
  echo "    ---setup=STRATEGY"
  echo "        Setup the docker container. Options are: alwaysbuild, alwayscachedbuild, ifneedbebuild, ifneedbecachedbuild, alwayspull, alwayspullelsebuild, alwayspullelsecachedbuild, ifneedbepull, ifneedbepullelsebuild, ifneedbepullelsecachedbuild, push, pushifnotpresent, donothing."
  echo "        Default: ifneedbepullelsecachedbuild"
  echo "    ---dockerfile"
  echo "        Print the dockerfile to stdout."
  echo "    ---docker_run_args=ARG"
  echo "        Provide runtime arguments to Docker. See the documentation on \`docker run\` for more information."
  echo "    ---docker_image_id"
  echo "        Print the docker image id to stdout."
  echo "    ---debug"
  echo "        Enter the docker container for debugging purposes."
  echo ""
  echo "Viash built in Engines:"
  echo "    ---engine=ENGINE_ID"
  echo "        Specify the engine to use. Options are: docker."
  echo "        Default: docker"
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "h5mu_to_qc_json build_main"
            exit
            ;;
        --input)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --modality)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality=*)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality=*\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --ingestion_method)
            [ -n "$VIASH_PAR_INGESTION_METHOD" ] && ViashError Bad arguments for option \'--ingestion_method\': \'$VIASH_PAR_INGESTION_METHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INGESTION_METHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --ingestion_method. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --ingestion_method=*)
            [ -n "$VIASH_PAR_INGESTION_METHOD" ] && ViashError Bad arguments for option \'--ingestion_method=*\': \'$VIASH_PAR_INGESTION_METHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INGESTION_METHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_sample_id)
            [ -n "$VIASH_PAR_OBS_SAMPLE_ID" ] && ViashError Bad arguments for option \'--obs_sample_id\': \'$VIASH_PAR_OBS_SAMPLE_ID\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_SAMPLE_ID="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_sample_id. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_sample_id=*)
            [ -n "$VIASH_PAR_OBS_SAMPLE_ID" ] && ViashError Bad arguments for option \'--obs_sample_id=*\': \'$VIASH_PAR_OBS_SAMPLE_ID\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_SAMPLE_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_total_counts)
            [ -n "$VIASH_PAR_OBS_TOTAL_COUNTS" ] && ViashError Bad arguments for option \'--obs_total_counts\': \'$VIASH_PAR_OBS_TOTAL_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_TOTAL_COUNTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_total_counts. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_total_counts=*)
            [ -n "$VIASH_PAR_OBS_TOTAL_COUNTS" ] && ViashError Bad arguments for option \'--obs_total_counts=*\': \'$VIASH_PAR_OBS_TOTAL_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_TOTAL_COUNTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_num_nonzero_vars)
            [ -n "$VIASH_PAR_OBS_NUM_NONZERO_VARS" ] && ViashError Bad arguments for option \'--obs_num_nonzero_vars\': \'$VIASH_PAR_OBS_NUM_NONZERO_VARS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_NUM_NONZERO_VARS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_num_nonzero_vars. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_num_nonzero_vars=*)
            [ -n "$VIASH_PAR_OBS_NUM_NONZERO_VARS" ] && ViashError Bad arguments for option \'--obs_num_nonzero_vars=*\': \'$VIASH_PAR_OBS_NUM_NONZERO_VARS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_NUM_NONZERO_VARS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_fraction_mitochondrial)
            [ -n "$VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL" ] && ViashError Bad arguments for option \'--obs_fraction_mitochondrial\': \'$VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_fraction_mitochondrial. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_fraction_mitochondrial=*)
            [ -n "$VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL" ] && ViashError Bad arguments for option \'--obs_fraction_mitochondrial=*\': \'$VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_fraction_ribosomal)
            [ -n "$VIASH_PAR_OBS_FRACTION_RIBOSOMAL" ] && ViashError Bad arguments for option \'--obs_fraction_ribosomal\': \'$VIASH_PAR_OBS_FRACTION_RIBOSOMAL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_FRACTION_RIBOSOMAL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_fraction_ribosomal. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_fraction_ribosomal=*)
            [ -n "$VIASH_PAR_OBS_FRACTION_RIBOSOMAL" ] && ViashError Bad arguments for option \'--obs_fraction_ribosomal=*\': \'$VIASH_PAR_OBS_FRACTION_RIBOSOMAL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_FRACTION_RIBOSOMAL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_reporting_json)
            [ -n "$VIASH_PAR_OUTPUT_REPORTING_JSON" ] && ViashError Bad arguments for option \'--output_reporting_json\': \'$VIASH_PAR_OUTPUT_REPORTING_JSON\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_REPORTING_JSON="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_reporting_json. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_reporting_json=*)
            [ -n "$VIASH_PAR_OUTPUT_REPORTING_JSON" ] && ViashError Bad arguments for option \'--output_reporting_json=*\': \'$VIASH_PAR_OUTPUT_REPORTING_JSON\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_REPORTING_JSON=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_total_counts)
            [ -n "$VIASH_PAR_MIN_TOTAL_COUNTS" ] && ViashError Bad arguments for option \'--min_total_counts\': \'$VIASH_PAR_MIN_TOTAL_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_TOTAL_COUNTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_total_counts. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_total_counts=*)
            [ -n "$VIASH_PAR_MIN_TOTAL_COUNTS" ] && ViashError Bad arguments for option \'--min_total_counts=*\': \'$VIASH_PAR_MIN_TOTAL_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_TOTAL_COUNTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_num_nonzero_vars)
            [ -n "$VIASH_PAR_MIN_NUM_NONZERO_VARS" ] && ViashError Bad arguments for option \'--min_num_nonzero_vars\': \'$VIASH_PAR_MIN_NUM_NONZERO_VARS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_NUM_NONZERO_VARS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_num_nonzero_vars. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --min_num_nonzero_vars=*)
            [ -n "$VIASH_PAR_MIN_NUM_NONZERO_VARS" ] && ViashError Bad arguments for option \'--min_num_nonzero_vars=*\': \'$VIASH_PAR_MIN_NUM_NONZERO_VARS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MIN_NUM_NONZERO_VARS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_metadata)
            if [ -z "$VIASH_PAR_OBS_METADATA" ]; then
              VIASH_PAR_OBS_METADATA="$2"
            else
              VIASH_PAR_OBS_METADATA="$VIASH_PAR_OBS_METADATA;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_metadata. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_metadata=*)
            if [ -z "$VIASH_PAR_OBS_METADATA" ]; then
              VIASH_PAR_OBS_METADATA=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OBS_METADATA="$VIASH_PAR_OBS_METADATA;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --obs_cellbender)
            if [ -z "$VIASH_PAR_OBS_CELLBENDER" ]; then
              VIASH_PAR_OBS_CELLBENDER="$2"
            else
              VIASH_PAR_OBS_CELLBENDER="$VIASH_PAR_OBS_CELLBENDER;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_cellbender. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_cellbender=*)
            if [ -z "$VIASH_PAR_OBS_CELLBENDER" ]; then
              VIASH_PAR_OBS_CELLBENDER=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OBS_CELLBENDER="$VIASH_PAR_OBS_CELLBENDER;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --uns_cellranger_metrics)
            [ -n "$VIASH_PAR_UNS_CELLRANGER_METRICS" ] && ViashError Bad arguments for option \'--uns_cellranger_metrics\': \'$VIASH_PAR_UNS_CELLRANGER_METRICS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_UNS_CELLRANGER_METRICS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --uns_cellranger_metrics. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --uns_cellranger_metrics=*)
            [ -n "$VIASH_PAR_UNS_CELLRANGER_METRICS" ] && ViashError Bad arguments for option \'--uns_cellranger_metrics=*\': \'$VIASH_PAR_UNS_CELLRANGER_METRICS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_UNS_CELLRANGER_METRICS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_nucleus_area)
            [ -n "$VIASH_PAR_OBS_NUCLEUS_AREA" ] && ViashError Bad arguments for option \'--obs_nucleus_area\': \'$VIASH_PAR_OBS_NUCLEUS_AREA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_NUCLEUS_AREA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_nucleus_area. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_nucleus_area=*)
            [ -n "$VIASH_PAR_OBS_NUCLEUS_AREA" ] && ViashError Bad arguments for option \'--obs_nucleus_area=*\': \'$VIASH_PAR_OBS_NUCLEUS_AREA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_NUCLEUS_AREA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_cell_area)
            [ -n "$VIASH_PAR_OBS_CELL_AREA" ] && ViashError Bad arguments for option \'--obs_cell_area\': \'$VIASH_PAR_OBS_CELL_AREA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CELL_AREA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_cell_area. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_cell_area=*)
            [ -n "$VIASH_PAR_OBS_CELL_AREA" ] && ViashError Bad arguments for option \'--obs_cell_area=*\': \'$VIASH_PAR_OBS_CELL_AREA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CELL_AREA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_x_coord)
            [ -n "$VIASH_PAR_OBS_X_COORD" ] && ViashError Bad arguments for option \'--obs_x_coord\': \'$VIASH_PAR_OBS_X_COORD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_X_COORD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_x_coord. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_x_coord=*)
            [ -n "$VIASH_PAR_OBS_X_COORD" ] && ViashError Bad arguments for option \'--obs_x_coord=*\': \'$VIASH_PAR_OBS_X_COORD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_X_COORD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_y_coord)
            [ -n "$VIASH_PAR_OBS_Y_COORD" ] && ViashError Bad arguments for option \'--obs_y_coord\': \'$VIASH_PAR_OBS_Y_COORD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_Y_COORD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_y_coord. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_y_coord=*)
            [ -n "$VIASH_PAR_OBS_Y_COORD" ] && ViashError Bad arguments for option \'--obs_y_coord=*\': \'$VIASH_PAR_OBS_Y_COORD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_Y_COORD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_control_probe_counts)
            [ -n "$VIASH_PAR_OBS_CONTROL_PROBE_COUNTS" ] && ViashError Bad arguments for option \'--obs_control_probe_counts\': \'$VIASH_PAR_OBS_CONTROL_PROBE_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CONTROL_PROBE_COUNTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_control_probe_counts. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_control_probe_counts=*)
            [ -n "$VIASH_PAR_OBS_CONTROL_PROBE_COUNTS" ] && ViashError Bad arguments for option \'--obs_control_probe_counts=*\': \'$VIASH_PAR_OBS_CONTROL_PROBE_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CONTROL_PROBE_COUNTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_control_codeword_counts)
            [ -n "$VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS" ] && ViashError Bad arguments for option \'--obs_control_codeword_counts\': \'$VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_control_codeword_counts. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_control_codeword_counts=*)
            [ -n "$VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS" ] && ViashError Bad arguments for option \'--obs_control_codeword_counts=*\': \'$VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---engine)
            VIASH_ENGINE_ID="$2"
            shift 2
            ;;
        ---engine=*)
            VIASH_ENGINE_ID="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---setup)
            VIASH_MODE='setup'
            VIASH_SETUP_STRATEGY="$2"
            shift 2
            ;;
        ---setup=*)
            VIASH_MODE='setup'
            VIASH_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---dockerfile)
            VIASH_MODE='dockerfile'
            shift 1
            ;;
        ---docker_run_args)
            VIASH_DOCKER_RUN_ARGS+=("$2")
            shift 2
            ;;
        ---docker_run_args=*)
            VIASH_DOCKER_RUN_ARGS+=("$(ViashRemoveFlags "$1")")
            shift 1
            ;;
        ---docker_image_id)
            VIASH_MODE='docker_image_id'
            shift 1
            ;;
        ---debug)
            VIASH_MODE='debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


if   [ "$VIASH_ENGINE_ID" == "docker" ]  ; then
  VIASH_ENGINE_TYPE='docker'
else
  ViashError "Engine '$VIASH_ENGINE_ID' is not recognized. Options are: docker."
  exit 1
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # check if docker is installed properly
  ViashDockerInstallationCheck

  # determine docker image id
  if [[ "$VIASH_ENGINE_ID" == 'docker' ]]; then
    VIASH_DOCKER_IMAGE_ID='ghcr.io/openpipelines-bio/openpipeline_qc/ingestion_qc/h5mu_to_qc_json:build_main'
  fi

  # print dockerfile
  if [ "$VIASH_MODE" == "dockerfile" ]; then
    ViashDockerfile "$VIASH_ENGINE_ID"
    exit 0

  elif [ "$VIASH_MODE" == "docker_image_id" ]; then
    echo "$VIASH_DOCKER_IMAGE_ID"
    exit 0
  
  # enter docker container
  elif [[ "$VIASH_MODE" == "debug" ]]; then
    VIASH_CMD="docker run --entrypoint=bash ${VIASH_DOCKER_RUN_ARGS[@]} -v '$(pwd)':/pwd --workdir /pwd -t $VIASH_DOCKER_IMAGE_ID"
    ViashNotice "+ $VIASH_CMD"
    eval $VIASH_CMD
    exit 

  # build docker image
  elif [ "$VIASH_MODE" == "setup" ]; then
    ViashDockerSetup "$VIASH_DOCKER_IMAGE_ID" "$VIASH_SETUP_STRATEGY"
    ViashDockerCheckCommands "$VIASH_DOCKER_IMAGE_ID" 'ps' 'bash'
    exit 0
  fi

  # check if docker image exists
  ViashDockerSetup "$VIASH_DOCKER_IMAGE_ID" ifneedbepullelsecachedbuild
  ViashDockerCheckCommands "$VIASH_DOCKER_IMAGE_ID" 'ps' 'bash'
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]i?b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1000 )) ;;
      mb|m)   memory_b=$(( $number * 1000 * 1000 )) ;;
      gb|g)   memory_b=$(( $number * 1000 * 1000 * 1000 )) ;;
      tb|t)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 )) ;;
      pb|p)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 * 1000 )) ;;
      kib|ki)   memory_b=$(( $number * 1024 )) ;;
      mib|mi)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gib|gi)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tib|ti)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pib|pi)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+999) / 1000 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+999) / 1000 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+999) / 1000 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+999) / 1000 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+999) / 1000 ))
    VIASH_META_MEMORY_KIB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MIB=$(( ($VIASH_META_MEMORY_KIB+1023) / 1024 ))
    VIASH_META_MEMORY_GIB=$(( ($VIASH_META_MEMORY_MIB+1023) / 1024 ))
    VIASH_META_MEMORY_TIB=$(( ($VIASH_META_MEMORY_GIB+1023) / 1024 ))
    VIASH_META_MEMORY_PIB=$(( ($VIASH_META_MEMORY_TIB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_INGESTION_METHOD+x} ]; then
  ViashError '--ingestion_method' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT_REPORTING_JSON+x} ]; then
  ViashError '--output_reporting_json' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_NAME+x} ]; then
  ViashError 'name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_MODALITY+x} ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z ${VIASH_PAR_OBS_SAMPLE_ID+x} ]; then
  VIASH_PAR_OBS_SAMPLE_ID="sample_id"
fi
if [ -z ${VIASH_PAR_OBS_TOTAL_COUNTS+x} ]; then
  VIASH_PAR_OBS_TOTAL_COUNTS="total_counts"
fi
if [ -z ${VIASH_PAR_OBS_NUM_NONZERO_VARS+x} ]; then
  VIASH_PAR_OBS_NUM_NONZERO_VARS="num_nonzero_vars"
fi
if [ -z ${VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL+x} ]; then
  VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL="fraction_mitochondrial"
fi
if [ -z ${VIASH_PAR_OBS_FRACTION_RIBOSOMAL+x} ]; then
  VIASH_PAR_OBS_FRACTION_RIBOSOMAL="fraction_ribosomal"
fi
if [ -z ${VIASH_PAR_MIN_TOTAL_COUNTS+x} ]; then
  VIASH_PAR_MIN_TOTAL_COUNTS="10"
fi
if [ -z ${VIASH_PAR_MIN_NUM_NONZERO_VARS+x} ]; then
  VIASH_PAR_MIN_NUM_NONZERO_VARS="10"
fi
if [ -z ${VIASH_PAR_OBS_CELLBENDER+x} ]; then
  VIASH_PAR_OBS_CELLBENDER="cellbender_background_fraction;cellbender_cell_probability;cellbender_cell_size;cellbender_droplet_efficiency"
fi
if [ -z ${VIASH_PAR_UNS_CELLRANGER_METRICS+x} ]; then
  VIASH_PAR_UNS_CELLRANGER_METRICS="metrics_cellranger"
fi
if [ -z ${VIASH_PAR_OBS_NUCLEUS_AREA+x} ]; then
  VIASH_PAR_OBS_NUCLEUS_AREA="nucleus_area"
fi
if [ -z ${VIASH_PAR_OBS_CELL_AREA+x} ]; then
  VIASH_PAR_OBS_CELL_AREA="cell_area"
fi
if [ -z ${VIASH_PAR_OBS_X_COORD+x} ]; then
  VIASH_PAR_OBS_X_COORD="x_coord"
fi
if [ -z ${VIASH_PAR_OBS_Y_COORD+x} ]; then
  VIASH_PAR_OBS_Y_COORD="y_coord"
fi
if [ -z ${VIASH_PAR_OBS_CONTROL_PROBE_COUNTS+x} ]; then
  VIASH_PAR_OBS_CONTROL_PROBE_COUNTS="control_probe_counts"
fi
if [ -z ${VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS+x} ]; then
  VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS="control_codeword_counts"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  IFS=';'
  set -f
  for file in $VIASH_PAR_INPUT; do
    unset IFS
    if [ ! -e "$file" ]; then
      ViashError "Input file '$file' does not exist."
      exit 1
    fi
  done
  set +f
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_MIN_TOTAL_COUNTS" ]]; then
  if ! [[ "$VIASH_PAR_MIN_TOTAL_COUNTS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_total_counts' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MIN_NUM_NONZERO_VARS" ]]; then
  if ! [[ "$VIASH_PAR_MIN_NUM_NONZERO_VARS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--min_num_nonzero_vars' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_INGESTION_METHOD" ]; then
  VIASH_PAR_INGESTION_METHOD_CHOICES=("cellranger_multi;xenium")
  IFS=';'
  set -f
  if ! [[ ";${VIASH_PAR_INGESTION_METHOD_CHOICES[*]};" =~ ";$VIASH_PAR_INGESTION_METHOD;" ]]; then
    ViashError '--ingestion_method' specified value of \'$VIASH_PAR_INGESTION_METHOD\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi
if [ ! -z "$VIASH_PAR_OUTPUT_REPORTING_JSON" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT_REPORTING_JSON")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT_REPORTING_JSON")"
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # detect volumes from file arguments
  VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_TEST_INPUT=()
  IFS=';'
  for var in $VIASH_PAR_INPUT; do
    unset IFS
    VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$var")" )
    var=$(ViashDockerAutodetectMount "$var")
    VIASH_TEST_INPUT+=( "$var" )
  done
  VIASH_PAR_INPUT=$(IFS=';' ; echo "${VIASH_TEST_INPUT[*]}")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_OUTPUT")" )
  VIASH_PAR_OUTPUT=$(ViashDockerAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_PAR_OUTPUT_REPORTING_JSON" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_OUTPUT_REPORTING_JSON")" )
  VIASH_PAR_OUTPUT_REPORTING_JSON=$(ViashDockerAutodetectMount "$VIASH_PAR_OUTPUT_REPORTING_JSON")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT_REPORTING_JSON" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashDockerAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashDockerAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashDockerAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashDockerAutodetectMount "$VIASH_META_TEMP_DIR")
fi
  
  # get unique mounts
  VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_DIRECTORY_MOUNTS[@]}"; do echo "$val"; done | sort -u))
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # change file ownership
  function ViashPerformChown {
    if (( ${#VIASH_CHOWN_VARS[@]} )); then
      set +e
      VIASH_CMD="docker run --entrypoint=bash --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_DOCKER_IMAGE_ID -c 'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
      ViashDebug "+ $VIASH_CMD"
      eval $VIASH_CMD
      set -e
    fi
  }
  trap ViashPerformChown EXIT
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # helper function for filling in extra docker args
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_DOCKER_RUN_ARGS+=("--memory=${VIASH_META_MEMORY_B}")
  fi
  if [ ! -z "$VIASH_META_CPUS" ]; then
    VIASH_DOCKER_RUN_ARGS+=("--cpus=${VIASH_META_CPUS}")
  fi
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  VIASH_CMD="docker run --entrypoint=bash ${VIASH_DOCKER_RUN_ARGS[@]} ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_DOCKER_IMAGE_ID"
fi


# set dependency paths


ViashDebug "Running command: $(echo $VIASH_CMD)"
cat << VIASHEOF | eval $VIASH_CMD
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-h5mu_to_qc_json-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import json
import pandas as pd
from pathlib import Path
import anndata as ad
import h5py
import sys
import os
import shutil

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "r'${VIASH_PAR_INPUT//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "r'${VIASH_PAR_MODALITY//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'ingestion_method': $( if [ ! -z ${VIASH_PAR_INGESTION_METHOD+x} ]; then echo "r'${VIASH_PAR_INGESTION_METHOD//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_sample_id': $( if [ ! -z ${VIASH_PAR_OBS_SAMPLE_ID+x} ]; then echo "r'${VIASH_PAR_OBS_SAMPLE_ID//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_total_counts': $( if [ ! -z ${VIASH_PAR_OBS_TOTAL_COUNTS+x} ]; then echo "r'${VIASH_PAR_OBS_TOTAL_COUNTS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_num_nonzero_vars': $( if [ ! -z ${VIASH_PAR_OBS_NUM_NONZERO_VARS+x} ]; then echo "r'${VIASH_PAR_OBS_NUM_NONZERO_VARS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_fraction_mitochondrial': $( if [ ! -z ${VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL+x} ]; then echo "r'${VIASH_PAR_OBS_FRACTION_MITOCHONDRIAL//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_fraction_ribosomal': $( if [ ! -z ${VIASH_PAR_OBS_FRACTION_RIBOSOMAL+x} ]; then echo "r'${VIASH_PAR_OBS_FRACTION_RIBOSOMAL//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_reporting_json': $( if [ ! -z ${VIASH_PAR_OUTPUT_REPORTING_JSON+x} ]; then echo "r'${VIASH_PAR_OUTPUT_REPORTING_JSON//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'min_total_counts': $( if [ ! -z ${VIASH_PAR_MIN_TOTAL_COUNTS+x} ]; then echo "int(r'${VIASH_PAR_MIN_TOTAL_COUNTS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'min_num_nonzero_vars': $( if [ ! -z ${VIASH_PAR_MIN_NUM_NONZERO_VARS+x} ]; then echo "int(r'${VIASH_PAR_MIN_NUM_NONZERO_VARS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'obs_metadata': $( if [ ! -z ${VIASH_PAR_OBS_METADATA+x} ]; then echo "r'${VIASH_PAR_OBS_METADATA//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'obs_cellbender': $( if [ ! -z ${VIASH_PAR_OBS_CELLBENDER+x} ]; then echo "r'${VIASH_PAR_OBS_CELLBENDER//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'uns_cellranger_metrics': $( if [ ! -z ${VIASH_PAR_UNS_CELLRANGER_METRICS+x} ]; then echo "r'${VIASH_PAR_UNS_CELLRANGER_METRICS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_nucleus_area': $( if [ ! -z ${VIASH_PAR_OBS_NUCLEUS_AREA+x} ]; then echo "r'${VIASH_PAR_OBS_NUCLEUS_AREA//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_cell_area': $( if [ ! -z ${VIASH_PAR_OBS_CELL_AREA+x} ]; then echo "r'${VIASH_PAR_OBS_CELL_AREA//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_x_coord': $( if [ ! -z ${VIASH_PAR_OBS_X_COORD+x} ]; then echo "r'${VIASH_PAR_OBS_X_COORD//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_y_coord': $( if [ ! -z ${VIASH_PAR_OBS_Y_COORD+x} ]; then echo "r'${VIASH_PAR_OBS_Y_COORD//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_control_probe_counts': $( if [ ! -z ${VIASH_PAR_OBS_CONTROL_PROBE_COUNTS+x} ]; then echo "r'${VIASH_PAR_OBS_CONTROL_PROBE_COUNTS//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'obs_control_codeword_counts': $( if [ ! -z ${VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS+x} ]; then echo "r'${VIASH_PAR_OBS_CONTROL_CODEWORD_COUNTS//\'/\'\"\'\"r\'}'"; else echo None; fi )
}
meta = {
  'name': $( if [ ! -z ${VIASH_META_NAME+x} ]; then echo "r'${VIASH_META_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kib': $( if [ ! -z ${VIASH_META_MEMORY_KIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KIB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mib': $( if [ ! -z ${VIASH_META_MEMORY_MIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MIB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gib': $( if [ ! -z ${VIASH_META_MEMORY_GIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GIB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tib': $( if [ ! -z ${VIASH_META_MEMORY_TIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TIB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pib': $( if [ ! -z ${VIASH_META_MEMORY_PIB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PIB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END

sys.path.append(meta["resources_dir"])
from setup_logger import setup_logger

logger = setup_logger()

par["obs_cellbender"] = {} if not par["obs_cellbender"] else par["obs_cellbender"]


def transform_df(df):
    """Transform a DataFrame into the annotation object format."""
    columns = []
    for name in df.columns:
        data = df[name]

        # Determine dtype
        if pd.api.types.is_integer_dtype(data):
            dtype = "integer"
        elif pd.api.types.is_float_dtype(data):
            dtype = "numeric"
        elif pd.api.types.is_categorical_dtype(data):
            dtype = "categorical"
        else:
            raise ValueError(f"Unknown/unsupported data type for column {name}")

        column_info = {"name": name, "dtype": dtype}

        if dtype == "categorical":
            column_info["data"] = data.cat.codes.tolist()
            column_info["categories"] = data.cat.categories.tolist()
        else:
            column_info["data"] = [None if pd.isna(x) else x for x in data]

        columns.append(column_info)

    return {"num_rows": len(df), "num_cols": len(df.columns), "columns": columns}


def check_optional_obs_keys(obs, keys, message):
    missing_keys = [key for key in keys if key not in obs.columns]
    if missing_keys:
        logger.info(f"Missing keys in obs: {', '.join(missing_keys)}. {message}")


def transform_cellranger_metrics(uns, sample_id):
    if not par["uns_cellranger_metrics"] in uns:
        raise ValueError(f"Could not find cellranger metrics in uns: {par['uns_cellranger_metrics']}. Provide correct value for --uns_cellranger_metrics or make sure data was ingested using CellRanger multi.")

    cellranger_metrics = (
        uns[par["uns_cellranger_metrics"]]
        .pivot_table(
            index=[],
            columns="Metric Name",
            values="Metric Value",
            aggfunc="first",
        )
        .reset_index(drop=True)
    )

    cellranger_metrics.columns.name = None
    # Remove thousands separator and convert to numeric
    cellranger_metrics = cellranger_metrics.map(
        lambda x: (
            pd.to_numeric(x.replace(",", ""), errors="coerce")
            if isinstance(x, str)
            else x
        )
    )
    # Replace spaces with underscores in column names
    cellranger_metrics.columns = cellranger_metrics.columns.str.replace(" ", "_")
    for col in cellranger_metrics.columns:
        cellranger_metrics[col] = pd.to_numeric(cellranger_metrics[col], errors="coerce")
    cellranger_metrics["sample_id"] = [sample_id[0]]

    return cellranger_metrics


def format_cellbender_columns(mod_obs):
    # Check if celbender was run on the dataset
    if par["obs_cellbender"]:
        check_optional_obs_keys(mod_obs, par["obs_cellbender"], "Run cellbender first to include these metrics.")

    cellbender_obs_keys = [column for column in par["obs_cellbender"] if column in mod_obs]

    for key in cellbender_obs_keys:
        if not pd.api.types.is_float_dtype(mod_obs[key]):
            try:
                mod_obs[key] = mod_obs[key].astype("float16")
            except ValueError:
                raise ValueError(f"Could not convert column {key} to a float dtype. Please make sure all cellbender metrics are numeric.")

    return cellbender_obs_keys, mod_obs


def format_required_columns(required_keys, mod_obs):

    for key in required_keys:
        if not pd.api.types.is_numeric_dtype(mod_obs[key]):
            raise ValueError(f"Column {key} must be a numeric dtype.")

    if not pd.api.types.is_integer_dtype(mod_obs[par["obs_total_counts"]]):
        logger.info(f"Converting {par['obs_total_counts']} from {mod_obs[par['obs_total_counts']].dtype} to integer dtype...")
        mod_obs[par["obs_total_counts"]] = mod_obs[par["obs_total_counts"]].astype(int)

    if not pd.api.types.is_integer_dtype(mod_obs[par["obs_num_nonzero_vars"]]):
        logger.info(f"Converting {par['obs_num_nonzero_vars']} from {mod_obs[par['obs_num_nonzero_vars']].dtype} to integer dtype...")
        mod_obs[par["obs_num_nonzero_vars"]] = mod_obs[par["obs_num_nonzero_vars"]].astype(int)

    if not pd.api.types.is_float_dtype(mod_obs[par["obs_fraction_mitochondrial"]]):
        logger.info(f"Converting {par['obs_fraction_mitochondrial']} from {mod_obs[par['obs_fraction_mitochondrial']].dtype} to float dtype...")
        mod_obs[par["obs_fraction_mitochondrial"]] = mod_obs[par["obs_fraction_mitochondrial"]].astype("float16")

    if not pd.api.types.is_float_dtype(mod_obs[par["obs_fraction_ribosomal"]]):
        logger.info(f"Converting {par['obs_fraction_ribosomal']} from {mod_obs[par['obs_fraction_ribosomal']].dtype} to float dtype...")
        mod_obs[par["obs_fraction_ribosomal"]] = mod_obs[par["obs_fraction_ribosomal"]].astype("float16")

    return mod_obs


def format_categorical_columns(mod_obs):
    # Fetch all categorical columns for grouping if no columns are provided
    if not par["obs_metadata"]:
        metadata_obs_keys = mod_obs.select_dtypes(include=["object", "category"]).columns.tolist()
        if par["obs_sample_id"] in metadata_obs_keys:
            metadata_obs_keys.remove(par["obs_sample_id"])
    else:
        check_optional_obs_keys(mod_obs, par["obs_metadata"], "Make sure requested metadata colmuns are present in obs.")
        metadata_obs_keys = [key for key in par["obs_metadata"] if key in mod_obs]

    for key in metadata_obs_keys:
        if not isinstance(key, pd.CategoricalDtype):
            logger.info(f"{key} is not a categorical dtype. Converting {key} from {mod_obs[key].dtype} to categorical dtype...")
            mod_obs[key] = mod_obs[key].astype(str).astype("category")

    return metadata_obs_keys, mod_obs


def generate_cellranger_stats(mod_obs, uns, sample_id, required_keys):

    # Format required columns
    mod_obs = format_required_columns(required_keys, mod_obs)

    # Fetch and format  all categorical columns for grouping
    metadata_obs_keys, mod_obs = format_categorical_columns(mod_obs)

    # Fetch and format cellbender columns
    cellbender_obs_keys, mod_obs = format_cellbender_columns(mod_obs)

    # Create cell RNA stats dataframe
    cell_rna_stats = pd.DataFrame(
        {
            "sample_id": pd.Categorical(sample_id),
            **{key: mod_obs[key] for key in required_keys},
            **{key: mod_obs[key] for key in cellbender_obs_keys},
            **{key: mod_obs[key] for key in metadata_obs_keys},
        }
    )

    cellranger_stats = transform_cellranger_metrics(uns, sample_id)

    return cell_rna_stats, cellranger_stats


def format_xenium_columns(mod_obs):

    mod_obs["nucleus_ratio"] = mod_obs[par["obs_nucleus_area"]] / mod_obs[par["obs_cell_area"]]

    xenium_formatted_columns = [par["obs_cell_area"], "nucleus_ratio", "x_coord", "y_coord"]
    for key in xenium_formatted_columns:
        mod_obs[key] = mod_obs[key].astype("float16")

    return mod_obs, xenium_formatted_columns


def generate_xenium_stats(mod_obs, sample_id, required_keys):

    # Format required columns
    mod_obs = format_required_columns(required_keys, mod_obs)

    # Format xenium-specific columns
    mod_obs, xenium_formatted_columns = format_xenium_columns(mod_obs)

    # Fetch and format  all categorical columns for grouping
    metadata_obs_keys, mod_obs = format_categorical_columns(mod_obs)

    # Create cell RNA stats dataframe
    cell_rna_stats = pd.DataFrame(
        {
            "sample_id": pd.Categorical(sample_id),
            **{key: mod_obs[key] for key in required_keys},
            **{key: mod_obs[key] for key in xenium_formatted_columns},
            **{key: mod_obs[key] for key in metadata_obs_keys}
        }
    )

    return cell_rna_stats


def concatenate_dataframes(dfs):
    '''Concatenates a list of dataframes into a single dataframe, preserving categorical columns.'''
    df = pd.concat(dfs, ignore_index=True)

    # Find categorical columns that became object columms
    for col in df.columns:
        if any(df[col].dtype.name == 'category' for df in dfs if col in df.columns):
            # Get all categorical series for this column
            cat_series = [df[col] for df in dfs if col in df.columns and df[col].dtype.name == 'category']
            if cat_series:
                # Union the categories and apply to result
                unioned = pd.api.types.union_categoricals(cat_series)
                df[col] = pd.Categorical(df[col], categories=unioned.categories)
    return df


def main(par):
    cell_stats_dfs = []
    sample_stats_dfs = []
    metrics_cellranger_dfs = []

    for i, mudata_file in enumerate(par["input"]):
        logger.info(f"Processing {mudata_file}")

        # read h5mu file
        file = h5py.File(mudata_file, "r")

        # read the necessary info
        grp_mod = file["mod"][par["modality"]]
        mod_obs = ad.experimental.read_elem(grp_mod["obs"])
        mod_obsm = ad.experimental.read_elem(grp_mod["obsm"])
        uns = ad.experimental.read_elem(file["uns"])

        # close the h5mu file
        file.close()

        barcodes_original_count = mod_obs.shape[0]

        # Add coordinates to obs before filtering
        if par["ingestion_method"] == "xenium":
            mod_obs["x_coord"] = mod_obsm["spatial"][:, 0]
            mod_obs["y_coord"] = mod_obsm["spatial"][:, 1]

        # Pre-filter cells
        logger.info("Pre-filtering cells based on counts...")
        if "min_total_counts" in par:
            mod_obs = mod_obs[mod_obs["total_counts"] >= par["min_total_counts"]]
        if "min_num_nonzero_vars" in par:
            mod_obs = mod_obs[mod_obs["num_nonzero_vars"] >= par["min_num_nonzero_vars"]]
        barcodes_filtered_count = mod_obs.shape[0]

        # Detect sample id's
        logger.info("Detecting sample id's...")
        sample_id = (
            mod_obs[par["obs_sample_id"]].tolist()
            if par["obs_sample_id"] in mod_obs.columns
            else [f"sample_{i}"] * mod_obs.shape[0]
        )

        # Generating sample summary statistics
        logger.info("Generating sample summary statistics...")
        required_keys = [
            par["obs_total_counts"],
            par["obs_num_nonzero_vars"],
            par["obs_fraction_mitochondrial"],
            par["obs_fraction_ribosomal"]
            ]
        missing_keys = [key for key in required_keys if key not in mod_obs.columns]
        if missing_keys:
            raise ValueError(f"Missing keys in obs: {', '.join(missing_keys)}")

        sample_summary = {
            "sample_id": pd.Categorical([sample_id[0]]),
            "rna_num_barcodes": [barcodes_original_count],
            "rna_num_barcodes_filtered": [barcodes_filtered_count],
            "rna_sum_total_counts": [mod_obs[par["obs_total_counts"]].sum()],
            "rna_median_total_counts": [mod_obs[par["obs_total_counts"]].median()],
            "rna_overall_num_nonzero_vars": [mod_obs[par["obs_num_nonzero_vars"]].sum()],
            "rna_median_num_nonzero_vars": [mod_obs[par["obs_num_nonzero_vars"]].median()],
        }

        if par["ingestion_method"] == "xenium":
            sample_summary["control_probe_percentage"] = mod_obs[par["obs_control_probe_counts"]].sum() / mod_obs["total_counts"].sum() * 100
            sample_summary["negative_decoding_percentage"] = mod_obs[par["obs_control_codeword_counts"]].sum() / mod_obs["total_counts"].sum() * 100

        sample_summary_stats = pd.DataFrame(sample_summary)

        if par["ingestion_method"] == "cellranger_multi":
            cell_rna_stats, cellranger_stats = generate_cellranger_stats(mod_obs, uns, sample_id, required_keys)
            metrics_cellranger_dfs.append(cellranger_stats)

        if par["ingestion_method"] == "xenium":
            cell_rna_stats = generate_xenium_stats(mod_obs, sample_id, required_keys)

        cell_stats_dfs.append(cell_rna_stats)
        sample_stats_dfs.append(sample_summary_stats)

    # Combine dataframes of all samples
    logger.info("Combining data of all samples into single object...")
    combined_cell_stats = concatenate_dataframes(cell_stats_dfs)
    combined_sample_stats = concatenate_dataframes(sample_stats_dfs)
    if par["ingestion_method"] == "cellranger_multi":
        combined_metrics_cellranger = concatenate_dataframes(metrics_cellranger_dfs)

    report_categories = [combined_cell_stats, combined_sample_stats]

    if par["ingestion_method"] == "cellranger_multi":
        report_categories.append(combined_metrics_cellranger)

    for df in report_categories:
        df["sample_id"] = pd.Categorical(df["sample_id"])

    output = {
        "cell_rna_stats": transform_df(combined_cell_stats),
        "sample_summary_stats": transform_df(combined_sample_stats)
    }

    if par["ingestion_method"] == "cellranger_multi":
        output["metrics_cellranger_stats"] = transform_df(combined_metrics_cellranger)

    logger.info(f"Writing output data json to {par['output']}")
    output_path = Path(par["output"])
    with open(output_path, "w") as f:
        json.dump(output, f, indent=2)

    report_structures = {
        "cellranger_multi": os.path.join(meta["resources_dir"], "report_structure/cellranger.json"),
        "xenium": os.path.join(meta["resources_dir"], "report_structure/xenium.json")
    }

    logger.info(f"Writing output report structure json to {par['output_reporting_json']}")
    shutil.copy(report_structures[par["ingestion_method"]], par["output_reporting_json"])


if __name__ == "__main__":
    main(par)
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # strip viash automount from file paths
  
  if [ ! -z "$VIASH_PAR_INPUT" ]; then
    unset VIASH_TEST_INPUT
    IFS=';'
    for var in $VIASH_PAR_INPUT; do
      unset IFS
      if [ -z "$VIASH_TEST_INPUT" ]; then
      VIASH_TEST_INPUT="$(ViashDockerStripAutomount "$var")"
    else
      VIASH_TEST_INPUT="$VIASH_TEST_INPUT;""$(ViashDockerStripAutomount "$var")"
    fi
    done
    VIASH_PAR_INPUT="$VIASH_TEST_INPUT"
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
    VIASH_PAR_OUTPUT=$(ViashDockerStripAutomount "$VIASH_PAR_OUTPUT")
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT_REPORTING_JSON" ]; then
    VIASH_PAR_OUTPUT_REPORTING_JSON=$(ViashDockerStripAutomount "$VIASH_PAR_OUTPUT_REPORTING_JSON")
  fi
  if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
    VIASH_META_RESOURCES_DIR=$(ViashDockerStripAutomount "$VIASH_META_RESOURCES_DIR")
  fi
  if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
    VIASH_META_EXECUTABLE=$(ViashDockerStripAutomount "$VIASH_META_EXECUTABLE")
  fi
  if [ ! -z "$VIASH_META_CONFIG" ]; then
    VIASH_META_CONFIG=$(ViashDockerStripAutomount "$VIASH_META_CONFIG")
  fi
  if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
    VIASH_META_TEMP_DIR=$(ViashDockerStripAutomount "$VIASH_META_TEMP_DIR")
  fi
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_OUTPUT_REPORTING_JSON" ] && [ ! -e "$VIASH_PAR_OUTPUT_REPORTING_JSON" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT_REPORTING_JSON' does not exist."
  exit 1
fi


exit 0
